{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport \"cross-fetch/polyfill\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { setContext } from \"apollo-link-context\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { env } from \"../configs\";\nvar cache = new InMemoryCache();\nvar httpLink = createUploadLink({\n  uri: env.API_ADRESSE\n});\nvar authLink = setContext(function _callee(_, _ref) {\n  var headers, token;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          headers = _ref.headers;\n          token = localStorage.getItem(env.TOKEN_NAME);\n          return _context.abrupt(\"return\", {\n            headers: _objectSpread({}, headers, {\n              authorization: token ? \"Bearer \".concat(token) : \"\"\n            })\n          });\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nvar link = authLink.concat(httpLink);\nexport var apolloClient = new ApolloClient({\n  cache: cache,\n  link: link\n});","map":{"version":3,"sources":["D:/Projet/MR-Schoom/front/src/api/apollo.ts"],"names":["ApolloClient","InMemoryCache","setContext","createUploadLink","env","cache","httpLink","uri","API_ADRESSE","authLink","_","headers","token","localStorage","getItem","TOKEN_NAME","authorization","link","concat","apolloClient"],"mappings":";;;;;;;AAAA,OAAO,sBAAP;AACA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAAqD,uBAArD;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AAEA,SAASC,GAAT,QAAoB,YAApB;AAEA,IAAMC,KAAK,GAAG,IAAIJ,aAAJ,EAAd;AACA,IAAMK,QAAQ,GAAGH,gBAAgB,CAAC;AAChCI,EAAAA,GAAG,EAAEH,GAAG,CAACI;AADuB,CAAD,CAAjC;AAGA,IAAMC,QAAQ,GAAGP,UAAU,CAAC,iBAAOQ,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,UAAAA,OAAZ,QAAYA,OAAZ;AACpBC,UAAAA,KADoB,GACZC,YAAY,CAACC,OAAb,CAAqBV,GAAG,CAACW,UAAzB,CADY;AAAA,2CAEnB;AACLJ,YAAAA,OAAO,oBACFA,OADE;AAELK,cAAAA,aAAa,EAAEJ,KAAK,oBAAaA,KAAb,IAAuB;AAFtC;AADF,WAFmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA3B;AASA,IAAMK,IAAI,GAAGR,QAAQ,CAACS,MAAT,CAAgBZ,QAAhB,CAAb;AAEA,OAAO,IAAMa,YAAiD,GAAG,IAAInB,YAAJ,CAC/D;AACEK,EAAAA,KAAK,EAALA,KADF;AAEEY,EAAAA,IAAI,EAAJA;AAFF,CAD+D,CAA1D","sourcesContent":["import \"cross-fetch/polyfill\";\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\r\nimport { setContext } from \"apollo-link-context\";\r\nimport { createUploadLink } from \"apollo-upload-client\";\r\n\r\nimport { env } from \"../configs\";\r\n\r\nconst cache = new InMemoryCache();\r\nconst httpLink = createUploadLink({\r\n  uri: env.API_ADRESSE,\r\n});\r\nconst authLink = setContext(async (_, { headers }) => {\r\n  const token = localStorage.getItem(env.TOKEN_NAME);\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\nconst link = authLink.concat(httpLink);\r\n\r\nexport const apolloClient: ApolloClient<NormalizedCacheObject> = new ApolloClient(\r\n  {\r\n    cache,\r\n    link,\r\n  }\r\n);\r\n"]},"metadata":{},"sourceType":"module"}