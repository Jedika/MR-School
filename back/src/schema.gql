# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AnneeScolaire {
  debut: DateTime!
  fin: DateTime!
  id: ID!
}

type Classe {
  designation: String!
  id: Float!
  niveau: Niveau!
  sections: [Section!]!
}

type ClasseSection {
  classe: Classe!
  section: Section!
}

type Classification {
  anneeScolaire: AnneeScolaire!
  classe: Classe!
  eleve: Eleve!
  numAppel: Float!
  section: Section!
}

input CoefficientInput {
  classeId: Float!
  matiereId: Float!
  value: Float!
}

type CoefficientTable {
  classe: Classe!
  coefficient: Float
  status: Boolean!
}

input CreateAnneeScolaireInput {
  debut: DateTime!
  fin: DateTime!
}

input CreateClasseInput {
  designation: String
  idNiveau: Float!
}

input CreateClasseSectionInput {
  idClasse: Float!
  idSection: Float!
}

input CreateClassificationInput {
  idAnneeScolaire: Float!
  idClasse: Float!
  idEleve: Float!
  idSection: Float!
  numAppel: Float!
}

input CreateEleveInput {
  eleve: EleveInput!
  parent: ParentInput!
  utilisateur: CreateUtilisateurInput_Eleve!
}

type CreateMatiereError {
  designationAlreadyExist: String!
}

union CreateMatiereResult = CreateMatiereError | Matiere

input CreateNiveauInput {
  designation: String
}

input CreateParentInput {
  adresse: String!
  contact: String!
  mere: String!
  pere: String!
  tuteur: String!
}

input CreateResponsableInput {
  fonction: FonctionInput!
  utilisateur: UtilisateurInput!
}

input CreateSectionInput {
  designation: String
}

input CreateUtilisateurInput_Eleve {
  adresse: String!
  contact: String!
  nom: String!
  photo: String
  prenom: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Eleve {
  matricule: String!
  naissance: DateTime!
  parent: Parent!
  sexe: String!
  utilisateur: Utilisateur!
}

input EleveInput {
  matricule: String!
  naissance: DateTime!
  sexe: String!
}

input ElevesFilterInput {
  matricule: String!
}

type ElevesResult {
  eleves: [Eleve!]!
  paginationMeta: PaginationMeta!
}

type EnseignerTable {
  classe: Classe!
  professeur: [Responsable!]!
  section: Section!
  status: Boolean!
}

type Fonction {
  designation: String!
  id: ID!
}

input FonctionInput {
  designation: String!
}

input IdCoefficient {
  idClasses: [Float!]!
  idMatiere: Float!
}

input LoginInput {
  contact: String!
  motDePasse: String!
}

type Matiere {
  coefficientTable: [CoefficientTable!]!
  designation: String!
  enseignerTable: [EnseignerTable!]!
  id: ID!
}

type Mutation {
  createAnneeScolaire(createAnneeScolaireInput: CreateAnneeScolaireInput!): AnneeScolaire!
  createClasse(createClasseInput: CreateClasseInput!): Classe!
  createClassification(createClassificationInput: CreateClassificationInput!): Classification!
  createEleve(input: CreateEleveInput!): Eleve!
  createFonction(input: FonctionInput!): Fonction!
  createMatiere(designation: String!): CreateMatiereResult!
  createNiveau(createNiveauInput: CreateNiveauInput!): Niveau!
  createOrUpdateSectionsOfClasse(createClasseSectionInput: CreateClasseSectionInput!): ClasseSection!
  createParent(input: CreateParentInput!): Parent!
  createResponsable(input: CreateResponsableInput!): Responsable!
  createSection(createSectionInput: CreateSectionInput!): Section!
  login(input: LoginInput!): TokenDto!
  removeMatiere(id: Float!): Boolean!
  setCoefficients(idCoefficient: IdCoefficient!): SetCoefficientsResult!
  setCoefficientValue(coefficientInput: CoefficientInput!): Boolean!
  updateAnneeScolaire(updateAnneeScolaireInput: UpdateAnneeScolaireInput!): AnneeScolaire!
  updateEleve(input: UpdateEleveInput!, matricule: String!): Eleve!
  updateMatiere(updateMatiereInput: UpdateMatiereInput!): Matiere!
  updateSection(updateSectionInput: UpdateSectionInput!): Section!
}

type Niveau {
  classes: [Classe!]!
  designation: String!
  id: ID!
}

input PaginationInput {
  limit: Float!
  page: Float!
}

type PaginationMeta {
  currentPage: Float!
  itemCount: Float!
  itemsPerPage: Float!
  totalItems: Float!
  totalPages: Float!
}

type Parent {
  adresse: String!
  contact: String!
  id: ID!
  mere: String!
  pere: String!
  tuteur: String!
}

input ParentInput {
  adresse: String!
  contact: String!
  mere: String!
  pere: String!
  tuteur: String!
}

type Query {
  eleves(elevesFilterInput: ElevesFilterInput!, paginationInput: PaginationInput!): ElevesResult!
  fonctionByDesignation(input: String!): Fonction!
  getAllClasses: [Classe!]!
  getAllNiveaux: [Niveau!]!
  helloMrSchool: String!
  matieres: [Matiere!]!
  WhoAmI: Utilisateur!
}

type Responsable {
  fonctions: [Fonction!]!
  utilisateur: Utilisateur!
}

type Section {
  designation: String!
  id: ID!
}

type SetCoefficientsResult {
  coefficientTable: [CoefficientTable!]!
  matiereId: Float!
}

type TokenDto {
  token: String
}

input UpdateAnneeScolaireInput {
  debut: DateTime!
  fin: DateTime!
  id: Float!
}

input UpdateEleveInput {
  eleve: EleveInput!
  parent: ParentInput!
  utilisateur: UtilisateurInput!
}

input UpdateMatiereInput {
  designation: String!
  id: Float!
}

input UpdateSectionInput {
  designation: String
  id: ID
}

type Utilisateur {
  adresse: String!
  contact: String!
  id: ID!
  motDePasse: String
  nom: String!
  photo: String
  prenom: String!
}

input UtilisateurInput {
  adresse: String!
  contact: String!
  motDePasse: String!
  nom: String!
  photo: String
  prenom: String!
}
